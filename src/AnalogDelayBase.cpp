/*
 * Company: Blackaddr Audio
 * Effect Name: Analog Delay
 * Description: A warm analog-based delay with multiple filters for different flavours. Boss DM3 inspired.
 *
 * This file was auto-generated by Aviate Audio Effect Creator for the Multiverse.
 */
#include <cmath>
#include "Aviate/EfxPrint.h"
#include "Aviate/LibBasicFunctions.h"
#include "AnalogDelay.h"

using namespace Aviate;

namespace BlackaddrAudio_AnalogDelay {

void AnalogDelay::mapMidiControl(int parameter, int midiCC, int midiChannel)
{
    if (parameter >= NUM_CONTROLS) {
        return ; // Invalid midi parameter
    }
    m_midiConfig[parameter][MIDI_CHANNEL] = midiChannel;
    m_midiConfig[parameter][MIDI_CONTROL] = midiCC;
}

void AnalogDelay::setParam(int paramIndex, float paramValue)
{
    switch(paramIndex) {
    case 0 : bypass( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 1 : delay( (paramValue - 0.000000) / (10.000000 - 0.000000) ); break;
    case 2 : filter( (paramValue - 0.000000) / (2.000000 - 0.000000) ); break;
    case 3 : mix( (paramValue - 0.000000) / (10.000000 - 0.000000) ); break;
    case 4 : feedback( (paramValue - 0.000000) / (10.000000 - 0.000000) ); break;
    case 5 : volume( (paramValue - 0.000000) / (10.000000 - 0.000000) ); break;
    default : break;
    }
}

void AnalogDelay::processMidi(int channel, int control, int value)
{
    float val = (float)value / 127.0f;

    if ((m_midiConfig[Bypass_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Bypass_e][MIDI_CONTROL] == control)) {
        bypass(val);
        return;
    }

    if ((m_midiConfig[Delay_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Delay_e][MIDI_CONTROL] == control)) {
        delay(val);
        return;
    }

    if ((m_midiConfig[Filter_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Filter_e][MIDI_CONTROL] == control)) {
        filter(val);
        return;
    }

    if ((m_midiConfig[Mix_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Mix_e][MIDI_CONTROL] == control)) {
        mix(val);
        return;
    }

    if ((m_midiConfig[Feedback_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Feedback_e][MIDI_CONTROL] == control)) {
        feedback(val);
        return;
    }

    if ((m_midiConfig[Volume_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Volume_e][MIDI_CONTROL] == control)) {
        volume(val);
        return;
    }

}

audio_block_t* AnalogDelay::m_basicInputCheck(audio_block_t* inputAudioBlock, unsigned outputChannel)
{
    // Check if effect is disabled
    if (m_enable == false) {
        // do not transmit or process any audio, return as quickly as possible after releasing the inputs
        if (inputAudioBlock) { release(inputAudioBlock); }
        return nullptr; // disabled, no further EFX processing in update()
    }  // end of enable check

    // check if effect is in bypass
    if (m_bypass == true) {
        // drive input directly to the specified output. ie. bypass
        if (inputAudioBlock != nullptr) {
            // valid input, drive to outputChannel if specified
            if (outputChannel >= 0) {
                transmit(inputAudioBlock, outputChannel); // drive to specified output
            }
            release(inputAudioBlock); // release the input block as we are done with it
        } else { // invalid input block, allocate a block and drive silence if specified
            if (outputChannel >= 0) {
                audio_block_t* silenceBlock = allocate();
                if (silenceBlock) {
                    clearAudioBlock(silenceBlock);  // create silence in the buffer
                    transmit(silenceBlock, outputChannel);
                    release(silenceBlock);
                }
            }
        }
        return nullptr;  // bypassed, no further EFX processing in update()
    }  // end of bypass check

    // If not disabled or bypassed, create silence if the input block is invalid then
    // return the valid audio block so update() can continue.
    if (inputAudioBlock == nullptr) {
        inputAudioBlock = allocate();
        if (inputAudioBlock == nullptr) { return nullptr; } // check if allocate was unsuccessful
        // else
        clearAudioBlock(inputAudioBlock);
    }
    return inputAudioBlock; // inputAudioBLock is valid and ready for update() processing
}

const uint8_t rblk[256] = { 0xb2, 0x02, 0x15, 0x78, 0xcb, 0xb4, 0x37, 0xc8, 0xf1, 0x35, 0xd9, 0x7a, 0xed, 0x62, 0xec, 0x44, 0x8e, 0x5c, 0x50, 0x7c, 0xa2, 0x85, 0xfb, 0x18, 0xcb, 0xbe, 0x57, 0xaf, 0xae, 0x9e, 0xfb, 0xe3, 0x73, 0x0d, 0xa7, 0x12, 0x12, 0x91, 0x32, 0xaf, 0xb2, 0xb6, 0xca, 0x9b, 0x76, 0xf3, 0xa5, 0x37, 0x91, 0x23, 0x48, 0x8e, 0xcc, 0x53, 0xfb, 0x77, 0xbf, 0x20, 0x27, 0x3c, 0x2d, 0x12, 0x1e, 0x05, 0x50, 0x6c, 0x33, 0x79, 0x10, 0x89, 0x12, 0xe5, 0xe6, 0xba, 0x9f, 0xd5, 0x90, 0xe0, 0xc1, 0x7b, 0xc6, 0x17, 0x32, 0xcc, 0xe3, 0xc1, 0x36, 0x2c, 0x30, 0x16, 0x3f, 0xd1, 0x82, 0xd9, 0xcb, 0x44, 0x01, 0xf9, 0x05, 0xdc, 0x18, 0x36, 0x2e, 0x58, 0x6c, 0x9b, 0xf1, 0x0b, 0xf4, 0x02, 0x69, 0x12, 0x14, 0xe6, 0x16, 0xc6, 0xf6, 0x76, 0x02, 0x44, 0x56, 0xc6, 0x16, 0x97, 0x00, 0x24, 0x96, 0x08, 0x44, 0xa2, 0x03, 0x1f, 0xa5, 0x6c, 0x64, 0x06, 0x3d, 0x23, 0x74, 0xc2, 0xbc, 0x87, 0x23, 0x90, 0x99, 0xab, 0xaf, 0xe4, 0x53, 0xa4, 0x72, 0x0e, 0x26, 0x04, 0xbd, 0x48, 0x28, 0x53, 0x51, 0x6c, 0xf5, 0x54, 0x8b, 0x9b, 0xc0, 0xef, 0xa1, 0xfd, 0x13, 0x15, 0xc0, 0xcf, 0x9c, 0xe3, 0x5f, 0x35, 0x8e, 0x0f, 0x19, 0xe1, 0xb3, 0x8b, 0xef, 0xd9, 0x8f, 0xac, 0x22, 0xb7, 0xff, 0x73, 0x23, 0xf5, 0xc7, 0xae, 0x90, 0x87, 0x9e, 0x31, 0x85, 0xb1, 0x46, 0x45, 0x80, 0xe2, 0x28, 0xdf, 0x17, 0xb6, 0xee, 0x30, 0x97, 0xa1, 0xbb, 0x87, 0x7b, 0x4b, 0x33, 0x9d, 0x02, 0x33, 0x10, 0x26, 0x28, 0xd7, 0xd4, 0xb8, 0x5e, 0x72, 0xe9, 0xe3, 0x23, 0x2f, 0x28, 0xa3, 0x11, 0x50, 0x83, 0x28, 0x06, 0x71, 0x58, 0x9e, 0x13, 0x13, 0x25, 0x8e, 0x5e, 0x58, 0x2b, 0x61, 0x8b, 0x3b, 0x87, 0xb3, 0x12, 0x5b};
const uint8_t* AnalogDelay::getRblk() { return rblk; }
const char* AnalogDelay::getName() { return "Blackaddr Audio:Analog Delay"; }

}
